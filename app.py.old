import streamlit as st
import requests
import time
import os
import json
import sys
from datetime import datetime

# --- Page Configuration ---
st.set_page_config(
    page_title="Alchemize",
    page_icon="‚öóÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- Initialize Session State with Multiple fallback options ---
def init_session_state():
    # Multiple fallback options for API URL
    api_url_options = [
        os.environ.get("API_BASE_URL"),
        "http://web:8000/api/v1",
        "http://localhost:8000/api/v1"
    ]
    
    # Use the first non-None option
    api_base_url = next((url for url in api_url_options if url), "http://localhost:8000/api/v1")
    
    defaults = {
        'token': None,
        'user_email': None,
        'content_job_id': None,
        'clip_job_id': None,
        'api_base_url': api_base_url,
        'last_poll_time': 0,
        'connection_tested': False,
        'connection_status': None
    }
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

init_session_state()

# --- Enhanced Connection Test ---
def test_api_connection():
    """Test API connection with multiple fallback URLs"""
    if st.session_state.connection_tested:
        return st.session_state.connection_status
    
    # Test multiple possible URLs
    test_urls = [
        st.session_state.api_base_url.replace("/api/v1", "/health"),
        "http://web:8000/health",
        "http://localhost:8000/health"
    ]
    
    for test_url in test_urls:
        try:
            response = requests.get(test_url, timeout=5)
            if response.status_code == 200:
                st.session_state.connection_status = True
                st.session_state.connection_tested = True
                
                # Update API base URL based on successful connection
                if "web:8000" in test_url:
                    st.session_state.api_base_url = "http://web:8000/api/v1"
                elif "localhost:8000" in test_url:
                    st.session_state.api_base_url = "http://localhost:8000/api/v1"
                
                return True
        except Exception as e:
            continue
    
    # If all URLs fail
    st.session_state.connection_status = False
    st.session_state.connection_tested = True
    return False

# --- Helper Functions ---
def make_api_request(method, endpoint, **kwargs):
    """Make API request with enhanced error handling"""
    try:
        url = f"{st.session_state.api_base_url}{endpoint}"
        kwargs.setdefault('timeout', 30)
        response = requests.request(method, url, **kwargs)
        return response
    except requests.exceptions.RequestException as e:
        st.error(f"API connection error: {e}")
        st.session_state.connection_tested = False
        return None

def login(email, password):
    response = make_api_request(
        "POST", "/auth/token",
        data={"username": email, "password": password}
    )
    if response and response.status_code == 200:
        st.session_state.token = response.json()['access_token']
        st.session_state.user_email = email
        return True, "Login successful!"
    elif response:
        return False, response.json().get("detail", "Invalid credentials")
    else:
        return False, "Could not connect to the API. Please check the connection."

def signup(email, password, full_name):
    response = make_api_request(
        "POST", "/auth/register",
        json={"email": email, "password": password, "full_name": full_name}
    )
    if response and response.status_code == 200:
        return True, "Signup successful! Please log in."
    elif response:
        return False, response.json().get("detail", "Could not create user.")
    else:
        return False, "Could not connect to the API."

# --- DEBUG: Show environment and connection info ---
def show_debug_info():
    """Display debug information"""
    st.sidebar.markdown("---")
    with st.sidebar.expander("üîß Debug Info", expanded=False):
        st.write("**Environment Variables:**")
        st.code(f"""
API_BASE_URL (env): {os.environ.get('API_BASE_URL', 'NOT SET')}
API_BASE_URL (session): {st.session_state.get('api_base_url', 'NOT SET')}
Connection Status: {st.session_state.get('connection_status', 'NOT TESTED')}
        """)
        
        # Test direct connection
        if st.button("üß™ Test All URLs", key="debug_test"):
            st.write("**Testing all possible URLs:**")
            test_urls = [
                "http://web:8000/health",
                "http://localhost:8000/health",
                "http://web:8000/api/v1/",
                "http://localhost:8000/api/v1/"
            ]
            
            for url in test_urls:
                try:
                    response = requests.get(url, timeout=3)
                    st.success(f"‚úÖ {url} ‚Üí {response.status_code}")
                except Exception as e:
                    st.error(f"‚ùå {url} ‚Üí {str(e)}")

# --- Main UI ---
st.title("üß™ Alchemize - Video to Viral Content")

# Connection status at the top
col1, col2 = st.columns([4, 1])
with col1:
    if test_api_connection():
        st.success("üü¢ Connected to API", help=f"Using: {st.session_state.api_base_url}")
    else:
        st.error("üî¥ Cannot connect to API", help="Check debug info in sidebar")

with col2:
    if st.button("üîÑ Retry Connection"):
        st.session_state.connection_tested = False
        st.rerun()

# --- Sidebar ---
with st.sidebar:
    st.markdown("‚öóÔ∏è **Alchemize Control Panel**")
    
    # Show debug info
    show_debug_info()
    
    if st.session_state.connection_status and not st.session_state.token:
        st.markdown("### üîê Login / Sign Up")
        
        tab1, tab2 = st.tabs(["Login", "Sign Up"])
        
        with tab1:
            with st.form("login_form"):
                email = st.text_input("Email")
                password = st.text_input("Password", type="password")
                if st.form_submit_button("Login"):
                    success, message = login(email, password)
                    if success:
                        st.success(message)
                        st.rerun()
                    else:
                        st.error(message)
        
        with tab2:
            with st.form("signup_form"):
                full_name = st.text_input("Full Name")
                email = st.text_input("Email")
                password = st.text_input("Password", type="password")
                if st.form_submit_button("Sign Up"):
                    success, message = signup(email, password, full_name)
                    if success:
                        st.success(message)
                    else:
                        st.error(message)
    
    elif st.session_state.token:
        st.success(f"‚úÖ Logged in as: {st.session_state.user_email}")
        if st.button("Logout"):
            st.session_state.token = None
            st.session_state.user_email = None
            st.rerun()

# --- Main Content ---
if not st.session_state.connection_status:
    st.error("üö® **Cannot Connect to Backend API**")
    
    st.markdown("""
    **Troubleshooting Steps:**
    
    1. **Check if backend is running:**
    ```bash
    curl http://localhost:8000/health
    ```
    
    2. **Check container status:**
    ```bash
    docker-compose ps
    ```
    
    3. **Restart services:**
    ```bash
    docker-compose restart frontend web
    ```
    
    4. **Check logs:**
    ```bash
    docker logs alchemize_frontend
    docker logs alchemize_web
    ```
    """)
    
    # Manual connection test
    st.markdown("### üß™ Manual Connection Test")
    test_url = st.text_input("Test URL:", value="http://web:8000/health")
    if st.button("Test This URL"):
        try:
            response = requests.get(test_url, timeout=5)
            st.success(f"‚úÖ Success! Status: {response.status_code}")
            if response.headers.get('content-type', '').startswith('application/json'):
                st.json(response.json())
            else:
                st.text(response.text)
        except Exception as e:
            st.error(f"‚ùå Failed: {e}")

elif not st.session_state.token:
    st.info("üëà **Please log in to access Alchemize features**")
    
    # Show features preview
    st.markdown("### üéØ What Alchemize Can Do")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("""
        **üé§ Live Karaoke Captions**
        - Word-by-word highlighting
        - Perfect timing sync
        - Professional quality
        """)
    
    with col2:
        st.markdown("""
        **üì± Multi-Platform Ready**
        - TikTok (9:16)
        - Instagram (1:1)
        - YouTube (16:9)
        """)
    
    with col3:
        st.markdown("""
        **‚ö° AI-Powered**
        - Auto clip generation
        - Content optimization
        - Hardware acceleration
        """)

else:
    st.success("üéâ **Welcome to Alchemize!**")
    
    tab1, tab2 = st.tabs(["üé¨ Video Clips", "‚úçÔ∏è Content Suite"])
    
    with tab1:
        st.header("Create Viral Video Clips")
        st.info("Upload any video format and get professional clips with live karaoke-style captions!")
        
        # Simple upload form for testing
        uploaded_file = st.file_uploader("Choose a video file", type=['mp4', 'mov', 'avi', 'mkv'])
        
        if uploaded_file and st.button("üöÄ Process Video"):
            st.success("Video upload functionality is working! Full processing coming soon...")
    
    with tab2:
        st.header("Generate Social Media Content")
        st.info("Transform any content into engaging social media posts!")
        
        content = st.text_area("Enter content to repurpose", height=150)
        if content and st.button("‚ú® Generate Content"):
            st.success("Content generation functionality is working! Full processing coming soon...")

# --- Footer ---
st.markdown("---")
st.markdown(f"**Debug Info:** API URL: `{st.session_state.api_base_url}` | Status: {'üü¢ Connected' if st.session_state.connection_status else 'üî¥ Disconnected'}")