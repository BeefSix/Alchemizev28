# Pre-commit hooks configuration for Alchemize
# Install with: pre-commit install
# Run manually with: pre-commit run --all-files

repos:
  # Code formatting
  - repo: https://github.com/psf/black
    rev: 23.9.1
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # Remove unused imports and variables
  - repo: https://github.com/PyCQA/autoflake
    rev: v2.2.1
    hooks:
      - id: autoflake
        args:
          - --in-place
          - --remove-all-unused-imports
          - --remove-unused-variables
          - --remove-duplicate-keys
          - --ignore-init-module-imports

  # Linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        additional_dependencies:
          - types-requests
          - types-redis
          - types-python-dateutil
        args: [--ignore-missing-imports, --no-strict-optional]

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, -f, json, -o, bandit-report.json]
        exclude: ^tests/

  # Dependency vulnerability scanning
  - repo: https://github.com/pyupio/safety
    rev: 2.3.5
    hooks:
      - id: safety
        args: [--json, --output, safety-report.json]

  # General pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # File formatting
      - id: trailing-whitespace
        exclude: ^.*\.(md|rst)$
      - id: end-of-file-fixer
        exclude: ^.*\.(md|rst)$
      - id: mixed-line-ending
        args: [--fix=lf]
      
      # File validation
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-toml
      - id: check-json
      - id: check-xml
      
      # Python specific
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]
      
      # Security
      - id: detect-private-key
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]
      
      # General
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

  # Docker
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.3
    hooks:
      - id: prettier
        types_or: [yaml, json, markdown]
        exclude: ^(.*\.md|.*\.json)$

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.5
    hooks:
      - id: shellcheck

  # Commit message validation
  - repo: https://github.com/commitizen-tools/commitizen
    rev: 3.10.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # License headers
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        files: \.py$
        args:
          - --license-filepath
          - LICENSE_HEADER.txt
          - --comment-style
          - "#"
        exclude: ^(tests/|migrations/)

  # Requirements.txt validation
  - repo: https://github.com/pre-commit/mirrors-pip-compile
    rev: 7.3.0
    hooks:
      - id: pip-compile
        files: ^requirements\.in$
        args: [--generate-hashes]

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: ^(.*\.lock|.*\.log|.*\.json)$

  # SQL formatting (if using raw SQL)
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 2.3.2
    hooks:
      - id: sqlfluff-lint
        additional_dependencies: [sqlfluff-templater-jinja]
      - id: sqlfluff-fix
        additional_dependencies: [sqlfluff-templater-jinja]

  # Documentation
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        exclude: ^(tests/|migrations/)

  # Code complexity
  - repo: local
    hooks:
      - id: complexity-check
        name: Check code complexity
        entry: radon cc --min B .
        language: system
        pass_filenames: false
        always_run: true

  # Test coverage check
  - repo: local
    hooks:
      - id: test-coverage
        name: Check test coverage
        entry: pytest --cov=app --cov-fail-under=80 --cov-report=term-missing
        language: system
        pass_filenames: false
        always_run: true
        stages: [push]

  # Custom hooks
  - repo: local
    hooks:
      # Check for TODO/FIXME comments
      - id: check-todos
        name: Check for TODO/FIXME comments
        entry: grep -rn "TODO\|FIXME\|XXX\|HACK" --include="*.py" .
        language: system
        pass_filenames: false
        always_run: true
        verbose: true
        stages: [manual]

      # Check for print statements
      - id: check-print-statements
        name: Check for print statements
        entry: grep -rn "print(" --include="*.py" . || true
        language: system
        pass_filenames: false
        always_run: true
        verbose: true
        stages: [manual]

      # Check for debug imports
      - id: check-debug-imports
        name: Check for debug imports
        entry: grep -rn "import pdb\|import ipdb\|import pudb" --include="*.py" .
        language: system
        pass_filenames: false
        always_run: true
        verbose: true

      # Validate environment variables
      - id: validate-env-vars
        name: Validate environment variables
        entry: python scripts/validate_env.py
        language: system
        pass_filenames: false
        always_run: true
        files: ^(\.env\.example|\.env)$

      # Check Docker build
      - id: docker-build-check
        name: Check Docker build
        entry: docker build -t alchemize-test .
        language: system
        pass_filenames: false
        always_run: true
        stages: [manual]

      # API schema validation
      - id: validate-openapi-schema
        name: Validate OpenAPI schema
        entry: python scripts/validate_openapi.py
        language: system
        pass_filenames: false
        always_run: true
        files: ^(app/.*\.py)$

# Global configuration
default_stages: [commit]
fail_fast: false
repos_update_schedule: weekly

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false